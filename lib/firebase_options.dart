// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['F_WEB_API_KEY'] ?? 'No Api Key',
    appId: dotenv.env['F_WEB_APP_ID'] ?? 'No App Id',
    messagingSenderId:
        dotenv.env['F_WEB_MESSAGING_SENDER_ID'] ?? 'No Sender Id',
    projectId: dotenv.env['F_WEB_PROJECT_ID'] ?? 'No Project Id',
    authDomain: dotenv.env['F_WEB_AUTH_DOMAIN'] ?? 'No Auth Domain',
    storageBucket: dotenv.env['F_WEB_STORAGE_BUCKET'] ?? 'No Storage Bucket',
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['F_ANDROID_API_KEY'] ?? 'No Api Key',
    appId: dotenv.env['F_ANDROID_APP_ID'] ?? 'No App Id',
    messagingSenderId:
        dotenv.env['F_ANDROID_MESSAGING_SENDER_ID'] ?? 'No Sender Id',
    projectId: dotenv.env['F_ANDROID_PROJECT_ID'] ?? 'No Project Id',
    storageBucket:
        dotenv.env['F_ANDROID_STORAGE_BUCKET'] ?? 'No Storage Bucket',
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['F_IOS_API_KEY'] ?? 'No Api Key',
    appId: dotenv.env['F_IOS_APP_ID'] ?? 'No App Id',
    messagingSenderId:
        dotenv.env['F_IOS_MESSAGING_SENDER_ID'] ?? 'No Sender Id',
    projectId: dotenv.env['F_IOS_PROJECT_ID'] ?? 'No Project Id',
    storageBucket: dotenv.env['F_IOS_STORAGE_BUCKET'] ?? 'No Storage Bucket',
    iosClientId: dotenv.env['F_IOS_CLIENT_ID'] ?? 'No Client Id',
    iosBundleId: dotenv.env['F_IOS_BUNDLE_ID'] ?? 'No Bundle Id',
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['F_MACOS_API_KEY'] ?? 'No Api Key',
    appId: dotenv.env['F_MACOS_APP_ID'] ?? 'No App Id',
    messagingSenderId:
        dotenv.env['F_MACOS_MESSAGING_SENDER_ID'] ?? 'No Sender Id',
    projectId: dotenv.env['F_MACOS_PROJECT_ID'] ?? 'No Project Id',
    storageBucket: dotenv.env['F_MACOS_STORAGE_BUCKET'] ?? 'No Storage Bucket',
    iosClientId: dotenv.env['F_MACOS_CLIENT_ID'] ?? 'No Client Id',
    iosBundleId: dotenv.env['F_MACOS_BUNDLE_ID'] ?? 'No Bundle Id',
  );
}
